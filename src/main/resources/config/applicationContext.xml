<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">

    <!-- 扫描:当前包中的类和子包中的类 -->
    <context:component-scan base-package="com"></context:component-scan>
    <!--aop-->
    <aop:aspectj-autoproxy />

    <!-- 配置service
        <bean> 配置需要创建的对象
            id ：用于之后从spring容器获得实例时使用的
            class ：需要创建实例的全限定类名
    -->
    <bean id="welcomeService" class="com.service.impl.WelcomeServiceImpl"></bean>

    <!-- 创建UserService -->
    <bean id="userService" class="com.service.impl.UserServiceImpl">
        <property name="userDao" ref="userDaoId"></property>
    </bean>

    <!-- 创建UserDao实例 -->
    <bean id="userDaoId" class="com.dao.impl.UserDaoImpl"></bean>

    <!--创建UserServiceImpl1-->
    <bean id="userService1" class="com.service.impl.UserServiceImpl1">
        <constructor-arg ref="userDaoId"></constructor-arg>
    </bean>

    <bean id="timeHandler" class="com.aop.TimeHandler" />

    <aop:config>
        <aop:aspect id="time" ref="timeHandler">
            <!--<aop:pointcut id="addAllMethod" expression="execution(* com.service.impl.*.*(..))" />-->
            <aop:pointcut id="addAllMethod" expression="execution(* com.service.impl.UserServiceImpl.addUser(..))" />
            <!--xml配置方式，环绕方法前和前置增强的顺序取决于aop:before和aop:around的配置顺序-->
            <aop:around method="around" pointcut-ref="addAllMethod" />
            <aop:before method="before" pointcut-ref="addAllMethod" />
            <aop:after method="after" pointcut-ref="addAllMethod" />
            <!--<aop:around method="around" pointcut-ref="addAllMethod" />-->
            <aop:after-returning method="afterReturning" pointcut-ref="addAllMethod" />
            <aop:after-throwing method="afterThrowing" pointcut-ref="addAllMethod" />
        </aop:aspect>
    </aop:config>

    <bean id="bmwCar" class="factorymethod.CarStaticFactory" factory-method="getCar">
        <constructor-arg value="3"></constructor-arg>
    </bean>

    <bean id="audiCar" class="factorymethod.CarStaticFactory" factory-method="getCar">
        <constructor-arg value="2"></constructor-arg>
    </bean>

    <bean id="carFactory" class="factorymethod.bean.CarInstanceFactory">
        <property name="map">
            <map>
                <entry key="4">
                    <bean class="factorymethod.Car">
                        <property name="id" value="4"></property>
                        <property name="name" value="Honda"></property>
                        <property name="price" value="300000"></property>
                    </bean>
                </entry>

                <entry key="6">
                    <bean class="factorymethod.Car">
                        <property name="id" value="6"></property>
                        <property name="name" value="ford"></property>
                        <property name="price" value="500000"></property>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="car4" factory-bean="carFactory" factory-method="getCar">
        <constructor-arg value="4"></constructor-arg>
    </bean>

    <bean id="car6" factory-bean="carFactory" factory-method="getCar">
        <constructor-arg value="6"></constructor-arg>
    </bean>

    <bean id="father" class="com.autowiring.Father"></bean>
    <!--constructor   ——根据构造函数参数的数据类型，进行byType模式的自动装配。constructor其实时按byType的方式进行构造函数的注入。-->
    <bean id="son" class="com.autowiring.Son" autowire="constructor"></bean>

    <!--byType   　　——根据Property的数据类型（Type）自动装配，如果一个bean的数据类型，
    兼容另一个bean中Property的数据类型，则自动装配。
    通过bean set方法中参数的类型和BeanFactory中定义合作者的类型做匹配，Spring会找到匹配的合作者进行注入。-->
    <!--
    <bean id="son" class="com.autowiring.Son" autowire="byType"></bean>-->

    <!--buName  ——根据Property的Name自动装配，如果一个bean的name，和另一个bean中的Property的name相同，
    则自动装配这个bean到Property中。 Spring用bean中set方法名和BeanFactory中定义的合作者的名称做匹配
    -->
    <!--
    <bean id="son" class="com.autowiring.Son" autowire="byName"></bean>-->

    <!--no ——默认情况下，不自动装配，通过“ref”attribute手动设定。-->
    <!--
    <bean id="son" class="com.autowiring.Son">
        <property name="father" ref="father"></property>
    </bean>-->

</beans>
